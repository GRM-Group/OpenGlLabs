buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
		classpath "com.github.jengelman.gradle.plugins:shadow:2.0.0"
    }
    
    repositories {
        mavenLocal()
        mavenCentral()
		maven {
      		url "https://plugins.gradle.org/m2/"
    	}
    }
}


import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.internal.os.OperatingSystem

apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'eclipse'
apply plugin: 'signing'
apply plugin: 'application'

group = "eu.grmdev"
description = "LWJGL Game with ninja"
version = '1.0'
mainClassName = "eu.grmdev.senryaku.Main"
def appId = "SenryakuShuriken"
archivesBaseName = appId

project.ext.lwjglVersion = "3.1.2"
project.ext.jomlVersion = "1.9.3"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

configurations {
	providedCompile
	compile.extendsFrom providedCompile
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
}

switch ( OperatingSystem.current() ) {
	case OperatingSystem.WINDOWS:
		project.ext.lwjglNatives = "natives-windows"
		break
	case OperatingSystem.LINUX:
		project.ext.lwjglNatives = "natives-linux"
	break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = "natives-macos"
		break
}

repositories {
	mavenCentral()
	mavenLocal()
	jcenter()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "http://repo.maven.apache.org/maven2" }
}

apply plugin: 'javafx-gradle-plugin'
apply plugin: "com.github.johnrengelman.shadow"

dependencies {
	compile group: 'com.google.guava', 						name: 'guava', 						version: '21.0'
	compile group: 'commons-io', 							name: 'commons-io', 				version: '2.5'
	compile group: 'org.apache.commons', 					name: 'commons-lang3', 				version: '3.5'
	compile group: 'org.apache.logging.log4j', 				name: 'log4j-core', 				version: '2.8.2'
	compile group: 'org.apache.logging.log4j', 				name: 'log4j', 						version: '2.8.2'
	compile group: 'com.guigarage', 						name: 'flatter', 					version: '0.7'
	compile group: 'org.l33tlabs.twl', 						name: 'pngdecoder', 				version: '1.0'
	compile group: 'org.joml', 								name: 'joml-camera', 				version:'1.2.0-SNAPSHOT'
	//compile group: 'org.l33tlabs.twl', 						name: 'pngdecoder', 				version:'1.0'
	compile "org.joml:joml:${jomlVersion}"
	compile "org.lwjgl:lwjgl:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-assimp:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-bgfx:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-egl:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-jawt:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-lmdb:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-nanovg:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-nfd:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-nuklear:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-openal:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-opencl:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-opengles:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-ovr:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-par:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-sse:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-stb:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-tinyfd:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-vulkan:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-xxhash:${lwjglVersion}"
	
	runtime "org.lwjgl:lwjgl:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-assimp:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-bgfx:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-lmdb:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-nanovg:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-nfd:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-nuklear:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-openal:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-opengles:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-ovr:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-par:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-sse:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-stb:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-tinyfd:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-xxhash:${lwjglVersion}:${lwjglNatives}"

	compileOnly('org.projectlombok:lombok')
	providedCompile "org.projectlombok:lombok:1.16.16"

	testCompile 'junit:junit:4.12'
	testCompile 'org.assertj:assertj-core:3.6.2'
}

task loadProperties {
	def home = System.properties['user.home']
	def fileProp = home + "/keystore/senryaku.gradle.properties";
	def fileKey = home + "/keystore/senryaku_keystore.jks"
	Properties props = new Properties()
	
	if (!file(fileProp).exists()) {
		if(!file(home + "/keystore").exists()) {
			file(home + "/keystore").mkdir()
		}
		if(file(fileProp).createNewFile()) {
			println "File " + fileProp + " Created"
			if (Os.isFamily(Os.FAMILY_WINDOWS)) {
				println "*** WINDOWS "
				println "You should write properties on your own (rPass, storePass & senryaku_key_url)"
			} else if (Os.isFamily(Os.FAMILY_UNIX)) {
				println "*** LINUX "
				props.setProperty("rPass", "$System.env.HB_SIGN_REL_PSWD")
				props.setProperty("storePass", "$System.env.HB_SIGN_STORE_PSWD")
				props.setProperty("senryaku_key_url", "$System.env.HB_KEYSTORE")
				props.store(new FileOutputStream(fileProp), null)
			}
		} else {
			println "Error creating file!"
		}
	}
	
	props.load(new FileInputStream(fileProp))
	project.ext.rPass = props.getProperty('rPass')
	project.ext.storePass = props.getProperty('storePass')
	project.ext.key_file_url = props.getProperty('senryaku_key_url')
	
	def f = new File(fileKey)
	if (!f.exists()) {
		println key_file_url
		new URL(key_file_url).withInputStream{ i -> f.withOutputStream{ it << i }}
	}
}

jar {
    manifest {
        attributes 'Implementation-Title': appId,
                   'Implementation-Version': version,
				   'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
      			   'Main-Class': mainClassName
    }
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task copyResources() {
	def f_dir = "${projectDir}/src/main/resources"

	doLast {
		copy {
			from f_dir
    		into "${buildDir}/libs/resources"
			include '*models/**'
			include 'textures/**'
		}

		copy{
			from f_dir
			into "${projectDir}/resources"
		}
	}
}

shadowJar{
	exclude 'models/**'
	exclude '/textures/**'
}

task removeOutResources(type: Delete) {
  delete 'resources'
}

build.dependsOn loadProperties
classes.dependsOn copyResources
eclipseClasspath.dependsOn copyResources
clean.dependsOn removeOutResources

String getProjectProperty(String propertyName) {
	project.hasProperty(propertyName) ? project.property(propertyName) : null
}

artifacts {
	archives javadocJar, sourcesJar
}

jfx {
	verbose = true
	appName = appId
	mainClass = mainClassName
	useEnvironmentRelativeExecutables = true
	
	css2bin = false
    preLoader = null // String
    updateExistingJar = true
    allPermissions = false
    manifestAttributes = null // Map<String, String>
    addPackagerJar = true
    copyAdditionalAppResourcesToJar = true
    skipCopyingDependencies = false
	checkForAbsolutePaths = true
	
	//jvmArgs = ['-XX:+AggressiveOpts', '-XX:CompileThreshold=1']
	//systemProperties = ['prism.disableRegionCaching':'true']
	//arguments = ['-l', '--fast']
	
    nativeOutputDir = "build/jfx/native"

	// Generate key: keytool -genkey -alias release -keyalg RSA -keystore keystore.jks -keysize 2048
	keyStore = file("${System.properties['user.home']}/keystore/senryaku_keystore.jks")
	keyStoreAlias = 'release'
	keyPassword = getProjectProperty('rPass')
	keyStorePassword = getProjectProperty('storePass')	
	
	vendor = 'Levvy'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

task pmd {
	doLast {
		println 'Running PMD static code analysis'
		ant {
			taskdef(name:'pmd', classname:'net.sourceforge.pmd.ant.PMDTask', classpath: configurations.pmdConf.asPath)
			pmd(shortFilenames:'true', failonruleviolation:'true', rulesetfiles:'conf/pmd-rules.xml') {
				formatter(type:'csv', tofile:'myreport.csv', toConsole:'true')
				fileset(dir: "src/main/java") {
					include(name: '**/*.java')
				}
				fileset(dir: "src/test/java") {
					include(name: '**/*.java')
				}        
			}
		}
	}
}